package it.unicam.cs.asdl1819.miniproject3;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;

/**
 * Gli oggetti di questa classe sono calcolatori di cammini minimi con sorgente
 * singola su un certo grafo diretto e pesato dato. Il grafo su cui lavorare
 * deve essere passato quando l'oggetto calcolatore viene costruito e non può
 * contenere archi con pesi negativi. Il calcolatore implementa il classico
 * algoritmo di Dijkstra per i cammini minimi con sorgente singola utilizzando
 * una coda con priorità che estrae il minimo in tempo lineare rispetto alla
 * lunghezza della coda. In questo caso il tempo di esecuzione dell'algoritmo di
 * Dijkstra è {@code O(n^2)} dove {@code n} è il numero dei nodi del grafo.
 * 
 * @author Luca Tesei
 *
 * @param <V>
 *            il tipo delle etichette dei nodi del grafo
 * @param <E>
 *            il tipo delle etichette degli archi del grafo
 */
public class DijkstraShortestPathComputer<V, E> {
	private Graph<V, E> list;
	private Set<GraphNode<V>> settledNodes;
	private Set<GraphNode<V>> unsettledNodes;
	private List<GraphEdge<V, E>> edges;
    // TODO inserire le variabili istanza

    /**
     * Crea un calcolatore di cammini minimi a sorgente singola per un grafo
     * diretto e pesato privo di pesi negativi.
     * 
     * @param graph
     *                  il grafo su cui opera il calcolatore di cammini minimi
     * @throws NullPointerException
     *                                      se il grafo passato è nullo
     * 
     * @throws IllegalArgumentException
     *                                      se il grafo passato è vuoto
     * 
     * @throws IllegalArgumentException
     *                                      se il grafo passato non è diretto
     * 
     * @throws IllegalArgumentException
     *                                      se il grafo passato non è pesato,
     *                                      cioè esiste almeno un arco il cui
     *                                      peso è {@code Double.NaN}.
     * @throws IllegalArgumentException
     *                                      se il grafo passato contiene almeno
     *                                      un peso negativo.
     */
    public DijkstraShortestPathComputer(Graph<V, E> graph) {
    	this.list = graph;
    	this.settledNodes = new HashSet<GraphNode<V>>();
    	this.unsettledNodes = new HashSet<GraphNode<V>>();
    	this.edges = new ArrayList<GraphEdge<V, E>>();

        // TODO implementare
    }

    /**
     * Inizializza le informazioni necessarie associate ai nodi del grafo
     * associato a questo calcolatore ed esegue l'algoritmo di Dijkstra sul
     * grafo.
     * 
     * @param sourceNode
     *                       il nodo sorgente da cui calcolare i cammini minimi
     *                       verso tutti gli altri nodi del grafo
     * @throws NullPointerException
     *                                      se il nodo passato è nullo
     * 
     * @throws IllegalArgumentException
     *                                      se il nodo passato non esiste nel
     *                                      grafo associato a questo calcolatore
     */
    public void computeShortestPathsFrom(GraphNode<V> sourceNode) {
    	if(sourceNode == null) {
    		throw new NullPointerException("Nodo nullo");
    	}
    	if(!this.list.containsNode(sourceNode)) {
    		throw new IllegalArgumentException("Nodo non esistente");
    	}
    	
    	Set<GraphNode<V>> settledNodes = new HashSet<GraphNode<V>>();
    	Set<GraphNode<V>> unsettledNodes = new HashSet<GraphNode<V>>();
    	unsettledNodes.add(sourceNode);
    	for(GraphNode<V> n : unsettledNodes) {
    		n.setPrevious(null);
    	}
    	while(unsettledNodes.size() != 0) {
    		GraphNode<V> currentNode = this.getLowestDistanceNode(unsettledNodes);
    		unsettledNodes.remove(currentNode);
    		settledNodes.add(currentNode);
    		if(currentNode.getFloatingPointDistance() == Integer.MAX_VALUE) {
    			break;
    		}
    		for(GraphNode<V> n : this.list.getAdjacentNodes(currentNode)) {
    			Set<GraphEdge<V, E>> edge = this.list.getEdgesBetween(currentNode, n);
    			for(GraphEdge<V, E> e : edge) {
    				double alt =  currentNode.getFloatingPointDistance() + e.getWeight();
    					if( n.getFloatingPointDistance() > alt) {
    						n.setFloatingPointDistance(alt);
    						n.setPrevious(currentNode);
    						unsettledNodes.add(n);
    					}
    				}
    			}
    		}
        // TODO implementare
    }

    /**
     * Determina se è stata invocata almeno una volta la procedura di calcolo
     * dei cammini minimi a partire da un certo nodo sorgente specificato.
     * 
     * @return true, se i cammini minimi da un certo nodo sorgente sono stati
     *         calcolati almeno una volta da questo calcolatore
     */
    public boolean isComputed() {
        // TODO implementare
        return false;
    }

    /**
     * Restituisce il nodo sorgente specificato nell'ultima chiamata effettuata
     * a {@code computeShortestPathsFrom(GraphNode<V>)}.
     * 
     * @return il nodo sorgente specificato nell'ultimo calcolo dei cammini
     *         minimi effettuato
     * 
     * @throws IllegalStateException
     *                                   se non è stato eseguito nemmeno una
     *                                   volta il calcolo dei cammini minimi a
     *                                   partire da un nodo sorgente
     */
    public GraphNode<V> getLastSource() {
        // TODO implementare
        final java.util.Iterator<GraphNode<V>> itr = settledNodes.iterator();
        GraphNode<V> lastElement = itr.next();

        while(itr.hasNext()) {
            lastElement=itr.next();
        }

        return lastElement;
    }

    /**
     * Restituisce il grafo su cui opera questo calcolatore.
     * 
     * @return il grafo su cui opera questo calcolatore
     */
    public Graph<V, E> getGraph() {
        // TODO implementare
        return this.list;
    }

    /**
     * Restituisce una lista di archi dal nodo sorgente dell'ultimo calcolo di
     * cammini minimi al nodo passato. Tale lista corrisponde a un cammino
     * minimo tra il nodo sorgente e il nodo target passato.
     * 
     * @param targetNode
     *                       il nodo verso cui restituire il cammino minimo
     *                       dalla sorgente
     * @return la lista di archi corrispondente al cammino minimo; la lista è
     *         vuota se il nodo passato è il nodo sorgente. Viene restituito
     *         {@code null} se il nodo passato non è raggiungibile dalla
     *         sorgente
     * 
     * @throws NullPointerException
     *                                      se il nodo passato è nullo
     * 
     * @throws IllegalArgumentException
     *                                      se il nodo passato non esiste
     * 
     * @throws IllegalStateException
     *                                      se non è stato eseguito nemmeno una
     *                                      volta il calcolo dei cammini minimi
     *                                      a partire da un nodo sorgente
     * 
     */
    public List<GraphEdge<V, E>> getShortestPathTo(GraphNode<V> targetNode) {
    	if(targetNode == null) {
    		throw new NullPointerException("Nodo nullo");
    	}
    	if(!this.list.containsNode(targetNode)) {
    		throw new IllegalArgumentException("Nodo non esistente");
    	}
    	GraphNode<V> node = null;
    	for(GraphNode<V> n : settledNodes) {
    		if(n.equals(targetNode)) {
    			node = n;
    		}
    	}
    	List<GraphEdge<V, E>> edges = new ArrayList<GraphEdge<V, E>>();
    	while(node.getPrevious() != null) {
    		for(GraphEdge<V, E> e : this.list.getIngoingEdges(node)) {
    			if(e.getNode1().equals(node.getPrevious())) {
    				edges.add(e);
    			}
    		}
    	}
    	Collections.reverse(edges);
        // TODO implementare
        return edges;
    }

    /**
     * Genera una stringa di descrizione di un path riportando i nodi
     * attraversati e i pesi degli archi. Nel caso di cammino vuoto genera solo
     * la stringa {@code "[ ]"}.
     * 
     * @param path
     *                 un cammino minimo
     * @return una stringa di descrizione del cammino minimo
     * @throws NullPointerException
     *                                  se il cammino passato è nullo
     */
    public String printPath(List<GraphEdge<V, E>> path) {
        if (path == null)
            throw new NullPointerException(
                    "Richiesta di stampare un path nullo");
        if (path.isEmpty())
            return "[ ]";
        // Costruisco la stringa
        StringBuffer s = new StringBuffer();
        s.append("[ " + path.get(0).getNode1().toString());
        for (int i = 0; i < path.size(); i++)
            s.append(" -- " + path.get(i).getWeight() + " --> "
                    + path.get(i).getNode2().toString());
        s.append(" ]");
        return s.toString();
    }


    private GraphNode<V> getLowestDistanceNode(Set<GraphNode<V>> unsettledNodes) {
    	GraphNode<V> lowestDistanceNode = null;
    	double lowestDistance = Integer.MAX_VALUE;
    	for (GraphNode<V> node: unsettledNodes) {
    		double nodeDistance = node.getFloatingPointDistance();
    		if (nodeDistance < lowestDistance) {
    			lowestDistance = nodeDistance;
    			lowestDistanceNode = node;
    		}
    	}
    	return lowestDistanceNode;
    
    }
}
