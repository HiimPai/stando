import java.util.*;
import java.util.HashSet; // Utilizzare questa classe per i set
import java.util.Iterator;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.TreeSet;
import java.util.stream.Collectors;

/**
 * TODO spiegare come viene implementato il multiset.
 * 
 * @author Luca Tesei (template) **Nome Cognome Studente** (implementazione)
 *
 * @param <E>
 *            il tipo degli elementi del multiset
 */
public class MyMultiset<E> implements Multiset<E> {
	private List<E> listaMultiset;
	private List<Integer> occorrenzeMultiset;
	private int Numero;
    // TODO Inserire le variabili istanza che servono

    // TODO Inserire eventuali classi interne per gli elementi del multinsieme e
    // per l'iteratore.

    /**
     * Crea un multiset vuoto.
     */
    public MyMultiset() {
        // TODO Implementare
    	listaMultiset = new ArrayList<E>();
    	occorrenzeMultiset = new ArrayList<Integer>();
    }

    public int size() {
        // TODO Implementare
    	int size = 0;
		for (Integer i: occorrenzeMultiset){
			size += i;
		}
		return size;
    }

    public int count(Object element) {
        // TODO Implementare
    	if(element == null) {
    		throw new NullPointerException();
    	}
    	int index = listaMultiset.indexOf(element);
    	if (index == -1) {
			return 0;
		} else if (index != -1) {
			return occorrenzeMultiset.get(index);
		}
		return index;
    }

    public int add(E element, int occurrences) {
        // TODO Implementare
    	int indice = listaMultiset.indexOf(element);
    	if(element == null) {
    		throw new NullPointerException();
    	}
    	if (occurrences < 0) {
			throw new IllegalArgumentException();
		}
    	if(occurrences > Integer.MAX_VALUE) {
    		throw new IllegalArgumentException();
    	}
    
    	int prevCount = occorrenzeMultiset.get(indice);
		
		if (indice != -1 && prevCount + occurrences > Integer.MAX_VALUE) {
			throw new IllegalArgumentException();
		}
		 else {
			 occorrenzeMultiset.set(indice, prevCount + occurrences);
			 }
		 if (occurrences != 0) {
			listaMultiset.add(element);
			occorrenzeMultiset.add(occurrences);
		}
		return prevCount;
    	
    }

    public void add(E element) {
        // TODO Implementare
    	 if(element == null) {
             throw new NullPointerException();
         }
         int indice = listaMultiset.indexOf(element);
         int prevCount = 0;
         if (listaMultiset.contains(element)) {
             prevCount = occorrenzeMultiset.get(indice);
             occorrenzeMultiset.set(indice, prevCount + 1);
         } else {
             listaMultiset.add(element);
             occorrenzeMultiset.add(1);
         }
     }

    public int remove(Object element, int occurrences) {
    	if(element == null) {
    		throw new NullPointerException();
    	}
    	int index = listaMultiset.indexOf(element);
        // TODO implementare
    	if (occurrences < 0) {
			throw new IllegalArgumentException();
		}

		if (index == -1)
			return 0;
		
    	int prevCount = occorrenzeMultiset.get(index);
		if (prevCount > occurrences) {
			occorrenzeMultiset.set(index, prevCount - occurrences);
		}
		else {
			listaMultiset.remove(index);
			occorrenzeMultiset.remove(index);
		}

		return prevCount;
    }

    public boolean remove(Object element) {
        // TODO implementare
    	if(element == null) {
    		throw new NullPointerException();
    	}
    	if (!listaMultiset.contains(element))
            return false;
    	
		return remove(element, 1) > 0;
    }
    
    public int setCount(E element, int count) {
    	if(element == null) {
    		throw new NullPointerException();
    	}
    	if (count < 0) {
			throw new IllegalArgumentException();
		}
    	int index = listaMultiset.indexOf(element);
		if (index == -1) {
			return add(element, count);
		}
		int prevCount = occorrenzeMultiset.get(index);
		if(count == 0) {
			remove(element,prevCount);
		}
		else {
			occorrenzeMultiset.set(index, count);
		}
		if(listaMultiset.contains(element)) {
			occorrenzeMultiset.set(index, count);
		}
		return prevCount;
		}
        // TODO implementare


    public Set<E> elementSet() {
        // TODO implementare
    	Set<E> p = new HashSet<E>(listaMultiset);                
    	return p;
    }

    public Iterator<E> iterator() {
    	MyMultisetIterator myItr = new MyMultisetIterator();
    	return myItr;
        // TODO implementare
    }
    private class MyMultisetIterator implements Iterator<E>{
   	 private int index = 0;
   	 private ArrayList<E> prova;
   	
		@Override
		public boolean hasNext() {
			return index != MyMultiset.this.listaMultiset.size();
			// TODO Auto-generated method stub
		}

		@Override
		public E next() {
			 if (index >= MyMultiset.this.listaMultiset.size())
		            throw new NoSuchElementException();

		        E elementOfMultiset = listaMultiset.get(index);
		        index++;
		        return elementOfMultiset;
			// TODO Auto-generated method stub
		}
       // TODO implementare
   }


    public boolean contains(Object element) {
        // TODO implementare
    	if(element == null) {
    		throw new NullPointerException();
    	}
    	return listaMultiset.contains(element);
    }

    public void clear() {
        // TODO implementare
    	listaMultiset.clear();
    	occorrenzeMultiset.clear();
    }

    public boolean isEmpty() {
        // TODO implementare
    	return (listaMultiset.size() == 0) ? true : false;
    }

    @Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((listaMultiset == null) ? 0 : listaMultiset.hashCode());
		result = prime * result + Numero;
		result = prime * result + ((occorrenzeMultiset == null) ? 0 : occorrenzeMultiset.hashCode());
		return result;
	}

    @Override
	public boolean equals(Object obj) {
		return false;
		
	}

}
