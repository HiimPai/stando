import java.util.*;

/**
 * Il crivello di Eratostene è un modo per determinare tutti i numeri primi da
 * {@code 1} a un certo intero {@code n} assegnato.
 * 
 * @author Luca Tesei (template), ** Nome Cognome Studente** (implementazione
 *
 */
public class CrivelloDiEratostene {
	Set<Integer> listaNumeri = new TreeSet<Integer>();	//Inizializzo l'arraylist di numeri primi
	Set<Integer> Totale = new TreeSet<Integer>();       //Inizializzo l'arraylist contenente tutti i numeri
	private int Numero;									//Inizializzo la variabile
	
	public CrivelloDiEratostene(int n) {
		Numero = n;
		if (n < 2) {
			throw new IllegalArgumentException(Integer.toString(n));
		}
			for(int i = 2; i <= Numero; i++) {			//Riempio le due liste per poi rimuovere i numeri non primi da listaNumeri
			listaNumeri.add(i);
			Totale.add(1);
			Totale.add(i);
		}
		for(int a = 2; (a * a) <= Numero; a++) {		//Inizializzo il setaccio, per ogni numero primo rimuovo dalla lista i suoi multipli
			for(int i = a * a; i <=Numero; i += a) {
			listaNumeri.remove(i);;
			Totale.add(i);
		}
		} 
}

	
    // TODO definire le variabili istanza appropriate

    /**
     * Costruisce il crivello di Eratostene fino a un certo numero. Il numero
     * deve essere almeno 2.
     * 
     * @param n
     *              numero di entrate nel crivello
     * 
     * @throws IllegalArgumentException
     *                                      se il numero {@code n} è minore di
     *                                      {@code 2}
     */

    /**
     * Cerca nel crivello l'indice del numero primo successivo a un numero dato.
     * 
     * @param n
     *              il numero da cui partire
     * @return il numero primo successivo a {@code n} in questo crivello oppure
     *         -1 se in questo crivello non ci sono numeri primi maggiori di
     *         {@code n}
     * @throws IllegalArgumentException
     *                                      se il numero passato {@code n}
     *                                      eccede la capacità di questo
     *                                      crivello o se è un numero minore di
     *                                      1.
     */
public int nextPrime(int n) {
	if (n > Numero || n < 1) {
		throw new IllegalArgumentException(Integer.toString(n));
	}
	if(n == Numero ) {			//DA MODIFICARE
		return -1;
}
	if(n == 2) {													//2 e 3 so gli unici numeri primi consecutivi
		n++;
	}
	else {															//Ogni numero di listaNumeri è contenuto dentro totale,
		while(Totale.contains(n) && !listaNumeri.contains(n)) {		//cerca il prossimo numero che entrambe le liste contengono
		n++;
	}
	}
	return n;
}			
        // TODO Implementare

    /**
     * Restituisce l'insieme dei numeri primi calcolati attraverso questo
     * crivello. Per convenzione il numero primo {@code 1} non viene incluso nel
     * risultato.
     * 
     * @return l'insieme dei numeri primi calcolati attraverso questo crivello.
     */
    public SortedSet<Integer> getPrimes() {
    	TreeSet<Integer> tree = new TreeSet<Integer>(); 	//Inizializzo il TreeSet
    	for(int i = 2; i <= Numero; i++) {					//Se il numero è primo lo aggiunge al TreeSet
    	    if(isPrime(i)|| i == 2) { 
    	    	tree.add(i); 
    	    	}
    	    		}
    	
        // TODO implementare
        return tree;
    }

    /**
     * Restituisce la capacità di questo crivello, cioè il numero massimo di
     * entrate.
     * 
     * @return la capacità di questo crivello
     */
    public int getCapacity() {
        // TODO implementare
        return Totale.size();		//Ritorna la capacità massima del crivello
    }

    /**
     * Controlla se un numero è primo. Può rispondere solo se il numero passato
     * come parametro è minore o uguale alla capacità di questo crivello.
     * 
     * @param n
     *              il numero da controllare
     * @return true se il numero passato è primo
     * @throws IllegalArgumentException
     *                                      se il numero passato {@code n}
     *                                      eccede la capacità di questo
     *                                      crivello o se è un numero minore di
     *                                      1.
     */
    public boolean isPrime(int n) {
        // TODO implementare
    	if(n > Numero || n < 1) {
    		throw new IllegalArgumentException(Integer.toString(n));
    	}
    	if(listaNumeri.contains(n) || n == 1) {		// se n è contenuto dentro listaNumeri, è sicuramente un numero primo
    		return true;
    	}
		return false;
    }
}
