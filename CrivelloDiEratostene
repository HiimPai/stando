import java.util.*;

public class CrivelloDiEratostene {
	CrivelloDiEratostene(int n) {
		Numero = n;
		if (n < 2) {
			throw new IllegalArgumentException(Integer.toString(n));
		}
	}
/*	List<Integer> ListaNumeri = new ArrayList<Integer>(); */		// inizializzo l'arraylist
	int Numero;
  
  public int nextPrime(int n) {
	if (n > Numero || n < 1) {
		throw new IllegalArgumentException(Integer.toString(n));
	}
	if(n == Numero ) {			//DA MODIFICARE
		return -1;
    }
   else if (isPrime(n)) {			//Se n è primo, lo aumento in modo da renderlo non primo ed attivare il ciclo while
    	n++;
    	while(!isPrime(n)) {		//Con il ciclo while aumento n fino a rendelo primo
    		n++;
    		}
    		return n;
    		}
    else if(!isPrime(n)) {			
    	while(!isPrime(n)) {		//Con il ciclo while aumento n fino a renderlo primo
    		n++;
    			}
    		return n;
    			}
		return 0; 					//Un metodo int richiede un return non nullo
    		}
        
    public SortedSet<Integer> getPrimes() {
    	TreeSet<Integer> j = new TreeSet<Integer>();
    	for(int i = 2; i <= Numero; i++) {	
    	    if(isPrime(i)|| i == 2) { 
    	    	j.add(i); 
    	    	}
    	    		}
        return j;
    }
    
   public int getCapacity() {
        return Numero;		//DA MODIFICARE
    }
    
    public boolean isPrime(int n) {
    	if(n > Numero || n < 1) {
    		throw new IllegalArgumentException(Integer.toString(n));
    	}
    	for(int i=2;i<n;i++) {		//Un numero primo può essere divisolo solo per 1 o se stesso,
	          if(n%i==0)			   //quindi se ha modulo = 0 (per i valori intermedi) il numero non è primo
	              return false;
	      }
	      return true;
    }
}
