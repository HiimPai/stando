package it.unicam.cs.asdl1819.miniproject2;
/**
 * 
 */

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;


/**
 * Un AVLTree è un albero binario di ricerca che si mantiene sempre bilanciato.
 * In questa particolare classe si possono inserire elementi ripetuti di tipo
 * {@code E} e non si possono inserire elementi {@code null}.
 * 
 * @author Luca Tesei
 * 
 * @param E
 *              il tipo degli elementi che possono essere inseriti in questo
 *              AVLTree. La classe {@code E} deve avere un ordinamento naturale
 *              definito tra gli elementi.
 *
 */
public class AVLTree<E extends Comparable<E>> {

    // puntatore al nodo radice, se questo puntatore è null allora questo
    // AVLTree è vuoto
    private AVLTreeNode root;

    // Numero di elementi inseriti in questo AVLTree, comprese le ripetizioni
    private int size;

    // Numero di nodi in questo AVLTree
    private int numberOfNodes;

    /**
     * Costruisce un AVLTree vuoto.
     */
    public AVLTree() {
        this.root = null; 
    }

    /**
     * Costruisce un AVLTree che consiste solo di un nodo radice.
     * 
     * @param rootElement
     *                        l'informazione associata al nodo radice
     * @throws NullPointerException
     *                                  se l'elemento passato è null
     */
    public AVLTree(E rootElement) {
        if (rootElement == null) {
        	throw new NullPointerException("Elemento nullo");
        }       
        this.root = new AVLTreeNode(rootElement);
        this.numberOfNodes++;
        this.size = root.getCount();
    }

    /**
     * Determina se questo AVLTree è vuoto.
     * 
     * @return true, se questo AVLTree è vuoto.
     */
    public boolean isEmpty() {
        return (this.root == null);
    }

    /**
     * Restituisce il numero di elementi contenuti in questo AVLTree. In caso di
     * elementi ripetuti essi vengono contati più volte.
     * 
     * @return il numero di elementi di tipo {@code E} presenti in questo
     *         AVLTree.
     */
    public int getSize() {
        return this.size;
    }

    /**
     * Restituisce il numero di nodi in questo AVLTree.
     * 
     * @return il numero di nodi in questo AVLTree.
     */
    public int getNumberOfNodes() {
        return this.numberOfNodes;
    }

    /**
     * Restituisce l'altezza di questo AVLTree. Se questo AVLTree è vuoto viene
     * restituito il valore -1.
     * 
     * @return l'altezza di questo AVLTree, -1 se questo AVLTree è vuoto.
     */
    public int getHeight() {
        if (this.root == null)
        	return -1;
        int nodeHeight = this.root.getHeight();
        return nodeHeight;
    }

    /**
     * @return the root
     */
    public AVLTreeNode getRoot() {
        return root;
    }

    /**
     * @param root
     *                 the root to set
     */
    public void setRoot(AVLTreeNode root) {
        this.root = root;
    }

    /**
     * Determina se questo AVLTree è bilanciato. L'albero è bilanciato se tutti
     * i nodi hanno un fattore di bilanciamento compreso tra -1 e +1.
     * 
     * @return true, se il fattore di bilanciamento di tutti i nodi dell'albero
     *         è compreso tra -1 e +1.
     */
    public boolean isBalanced() {
        boolean balance = this.root.isBalanced();
        return balance;
    }

    /**
     * Inserisce un nuovo elemento in questo AVLTree. Se l'elemento è già
     * presente viene incrementato il suo numero di occorrenze.
     * 
     * @param el
     *               l'elemento da inserire.
     * @return il numero di confronti tra elementi della classe {@code E}
     *         effettuati durante l'inserimento
     * @throws NullPointerException
     *                                  se l'elemento {@code el} è null
     */
    public int insert(E el) {
    	if(el == null) {
    		throw new NullPointerException("Elemento nullo");
    	} 
    	if(root == null) {
    		this.root = new AVLTreeNode(el);
    	}  
    	if(this.getNodeOf(el) == null) {
    		this.numberOfNodes++;
    	}

    	int element = this.root.insert(el);
    	this.size++;
    	return element;
    }

    /**
     * Determina se questo AVLTree contiene un certo elemento.
     * 
     * @param el
     *               l'elemento da cercare
     * @return true se l'elemento è presente in questo AVLTree, false
     *         altrimenti.
     * @throws NullPointerException
     *                                  se l'elemento {@code el} è null
     */
    public boolean contains(E el) {
    	if(el == null) {
    		throw new NullPointerException("Elemento nullo");
    	}    	
        boolean bool = this.root.search(el) != null;
        return bool;
    }

    /**
     * Determina se un elemento è presente in questo AVLTree e ne restituisce il
     * relativo nodo.
     * 
     * @param el
     *               l'elemento da cercare
     * @return il nodo di questo AVLTree che contiene l'elemento {@code el} e la
     *         sua molteplicità, oppure {@code null} se l'elemento {@code el}
     *         non è presente in questo AVLTree.
     * @throws NullPointerException
     *                                  se l'elemento {@code el} è null
     * 
     */
    public AVLTreeNode getNodeOf(E el) {
    	if(el == null) {
    		throw new NullPointerException("Elemento nullo");
    	}
        AVLTreeNode node = this.root.search(el);
        return node;
    }

    /**
     * Determina il numero di occorrenze di un certo elemento in questo AVLTree.
     * 
     * @param el
     *               l'elemento di cui determinare il numero di occorrenze
     * @return il numero di occorrenze dell'elemento {@code el} in questo
     *         AVLTree, zero se non è presente.
     * @throws NullPointerException
     *                                  se l'elemento {@code el} è null
     */
    public int getCount(E el) {
    	if(el == null) {
    		throw new NullPointerException("Elemento nullo");
    	}   	
    	AVLTreeNode node = this.root.search(el);    	
    	if(node != null) {
    		return node.getCount();
    	}
    	else {
    		return 0;    				
    	}
    }

    /*
     * (non-Javadoc)
     * 
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
        String descr = "AVLTree [root=" + root.el.toString() + ", size=" + size
                + ", numberOfNodes=" + numberOfNodes + "]\n";
        return descr + this.root.toString();
    }

    /**
     * Restituisce la lista degli elementi contenuti in questo AVLTree secondo
     * l'ordine determinato dalla visita in-order. Per le proprietà dell'albero
     * AVL la lista ottenuta conterrà gli elementi in ordine crescente rispetto
     * all'ordinamento naturale della classe {@code E}. Nel caso di elementi
     * ripetuti, essi appaiono più volte nella lista consecutivamente.
     * 
     * @return la lista ordinata degli elementi contenuti in questo AVLTree,
     *         tenendo conto della loro molteplicità.
     */
    public List<E> inOrderVisit() {
    	// TODO implementare e usare il metodo corrispondente in AVLTreeNode
    	List<E> list = new ArrayList<E>();
        // CASO in cui ho una radice
        if(this.root != null) {
        	this.root.inOrderVisit(list);
            return list;
            }
        else {
            //Se l'albero è vuoto
            return list;
        }
    }

    /**
     * Restituisce l'elemento minimo presente in questo AVLTree.
     * 
     * @return l'elemento minimo in questo AVLTree, {@code null} se questo
     *         AVLTree è vuoto.
     */
    public E getMinimum() {
        if(this.root == null) {
        	return null;
        }        
        E node = this.root.getMinimum().el;
        return node;       		
    }

    /**
     * Restituisce l'elemento massimo presente in questo AVLTree.
     * 
     * @return l'elemento massimo in questo AVLTree, {@code null} se questo
     *         AVLTree è vuoto.
     */
    public E getMaximum() {
        // TODO implementare e usare il metodo corrispondente in AVLTreeNode
        if(this.root == null) {
        	return null;
        }
        E max = root.getMaximum().el;
        return max;
    }

    /**
     * Restituisce l'elemento <b>strettamente</b> successore, in questo AVLTree,
     * di un dato elemento. Si richiede che l'elemento passato sia presente
     * nell'albero.
     * 
     * @param el
     *               l'elemento di cui si chiede il successore
     * @return l'elemento <b>strettamente</b> successore, rispetto
     *         all'ordinamento naturale della classe {@code E}, di {@code el} in
     *         questo AVLTree, oppure {@code null} se {@code el} è l'elemento
     *         massimo.
     * @throws NullPointerException
     *                                      se l'elemento {@code el} è null
     * @throws IllegalArgumentException
     *                                      se l'elemento {@code el} non è
     *                                      presente in questo AVLTree.
     */
    public E getSuccessor(E el) {
        AVLTreeNode node = this.getNodeOf(el);
        // TODO implementare e usare il metodo corrispondente in AVLTreeNode
        if(el == null) {
        	throw new NullPointerException("Elemento nullo");
        }
        //Se el è il nodo massimo
        if(el.equals(this.getMaximum())) {
        	return null;
        }
        if(node == null) {
            throw new IllegalArgumentException("Nodo non esistente");
        } 
        E next = node.getSuccessor().el;
        return next;
    }

    /**
     * Restituisce l'elemento <b>strettamente</b> predecessore, in questo
     * AVLTree, di un dato elemento. Si richiede che l'elemento passato sia
     * presente nell'albero.
     * 
     * @param el
     *               l'elemento di cui si chiede il predecessore
     * @return l'elemento <b>strettamente</b> predecessore rispetto
     *         all'ordinamento naturale della classe {@code E}, di {@code el} in
     *         questo AVLTree, oppure {@code null} se {@code el} è l'elemento
     *         minimo.
     * @throws NullPointerException
     *                                      se l'elemento {@code el} è null
     * @throws IllegalArgumentException
     *                                      se l'elemento {@code el} non è
     *                                      presente in questo AVLTree.
     */
    public E getPredecessor(E el) {
        AVLTreeNode node = this.getNodeOf(el);
        // TODO implementare e usare il metodo corrispondente in AVLTreeNode
        if(el == null) {
        	throw new NullPointerException("Elemento nullo");
        }
        if(node == null) {
        	throw new IllegalArgumentException("Nodo non esistente");
        }
        //Se el è il nodo minimo
        if(el.equals(this.getMinimum())) {
        	return null;
        }
        E prevNode = node.getPredecessor().el;
        return prevNode;
        }

    /**
     * Gli elementi di questa classe sono i nodi di un AVLTree, che è la classe
     * "involucro" della struttura dati.
     * 
     * @author Luca Tesei
     *
     */
    public class AVLTreeNode {
        // etichetta del nodo
        private E el;

        // molteplicità dell'elemento el
        private int count;

        // sottoalbero sinistro
        private AVLTreeNode left;

        // sottoalbero destro
        private AVLTreeNode right;

        // genitore del nodo, null se questo nodo è la radice dell'AVLTree
        private AVLTreeNode parent;

        // altezza del sottoalbero avente questo nodo come radice
        private int height;

        /**
         * Create an AVLTreeNode as a root leaf
         * 
         * @param el
         *               the element
         */
        public AVLTreeNode(E el) {
            this.el = el;
            this.count = 1;
            this.left = null;
            this.right = null;
            this.parent = null;
            this.height = 0;
        }

        /**
         * Create an AVLTreeNode node containing one element to be considered
         * child of the given parent.
         * 
         * @param el
         *                   the element
         * @param parent
         *                   the parent of the node
         */
        public AVLTreeNode(E el, AVLTreeNode parent) {
            this.el = el;
            this.count = 1;
            this.left = null;
            this.right = null;
            this.parent = parent;
            this.height = 0;
        }

        /**
         * Restituisce il nodo predecessore di questo nodo. Si suppone che
         * esista un nodo predecessore, cioè che questo nodo non contenga
         * l'elemento minimo del sottoalbero di cui è radice.
         * 
         * @return il nodo predecessore
         */
        public AVLTreeNode getPredecessor() {
            // TODO implementare
            if(this.left != null) {
            	return this.left.getMaximum();
            } 
            AVLTreeNode node = this;
            AVLTreeNode nodeParent = node.getParent();  
            while(nodeParent != null && node == nodeParent.left) {
            	node = nodeParent;
                nodeParent = nodeParent.parent;
            }
            return nodeParent;
        }

        /**
         * Restituisce il nodo successore di questo nodo. Si suppone che esista
         * un nodo successore, cioè che questo nodo non contenga l'elemento
         * massimo del sottoalbero di cui è radice.
         * 
         * @return il nodo successore
         * */
         
        public AVLTreeNode getSuccessor() {
                // TODO implementare
        	if(this.right != null) {
        		return this.right.getMinimum();
        	}
        	AVLTreeNode node = this;
        	AVLTreeNode nodeParent = node.parent;
        	while(node != null && node == nodeParent.right) {
        		node = nodeParent;
        		nodeParent = nodeParent.parent;	
        	}
        	return nodeParent;
        }
        	


        /**
         * Restituisce il nodo contenente l'elemento massimo del sottoalbero di
         * cui questo nodo è radice.
         * 
         * @return il nodo contenente l'elemento massimo del sottoalbero di cui
         *         questo nodo è radice.
         */
        public AVLTreeNode getMaximum() {
            // TODO implementare
            if (this.right == null) {
            	return this;
            }
            AVLTreeNode nodeMax = this.right.getMaximum();
            return nodeMax;
        }

        /**
         * Restituisce il nodo contenente l'elemento minimo del sottoalbero di
         * cui questo nodo è radice.
         * 
         * @return il nodo contenente l'elemento minimo del sottoalbero di cui
         *         questo nodo è radice.
         */
        public AVLTreeNode getMinimum() {
        	if(this.left == null) {
        		return this;
        	}
        	AVLTreeNode nodeMin = this.left.getMinimum();
        	return nodeMin;
        }

        /**
         * Determina se questo è un nodo foglia.
         * 
         * @return true se questo nodo non ha figli, false altrimenti.
         */
        public boolean isLeaf() {
            if(this.right == null && this.left == null) {
            	return true; 
            }
            else {
            	return false;
            }
        }

        /**
         * Restituisce l'altezza del sottoalbero la cui radice è questo nodo.
         * 
         * @return l'altezza del sotto albero la cui radice è questo nodo.
         */
        public int getHeight() {
            return this.height;
        }

        /**
         * Aggiorna l'altezza del sottoalbero la cui radice è questo nodo
         * supponendo che l'altezza dei nodi figli sia già stata aggiornata.
         */
        public void updateHeight() {  
        	if(this.isLeaf()) {
        		this.height = 0;
        	}
        	else if (this.left == null) {
        		this.height = 1 + this.right.getHeight();
        	}
        	else if(this.right == null) {
        		this.height = 1 + this.left.getHeight();
        	}
        	else {
        		if(this.left.getHeight() > this.right.getHeight()) {
        			this.height = 1 + this.left.getHeight();
        		}
        		else {
        			this.height = 1 + this.right.getHeight();
        		}
        	}
        }

        /**
         * Determina il fattore di bilanciamento di questo nodo. Se il nodo è
         * una foglia il fattore di bilanciamento è 0. Se il nodo ha solo il
         * figlio sinistro allora il fattore di bilanciamento è l'altezza del
         * figlio sinistro + 1. Se il nodo ha solo il figlio destro allora il
         * fattore di bilanciamento è l'altezza del figlio destro + 1,
         * moltiplicata per -1. Se il nodo ha entrambi i figli il fattore di
         * bilanciamento è l'altezza del figlio sinistro meno l'altezza del
         * figlio destro.
         * 
         * @return il fattore di bilanciamento di questo nodo.
         */
        public int getBalanceFactor() {
        	int balance = 0;
            if(this.isLeaf()) {
            	balance = 0;
            }
            else if(this.right == null) {
            	balance = this.left.getHeight() + 1; 
            }
            else if (this.left == null) {
            	balance = -(this.right.getHeight() + 1);
            }
            else if(this.right != null && this.left != null) {
            	balance = this.left.getHeight() - this.right.getHeight();
            }
            return balance;    
        }

        /**
         * Determina se questo nodo e tutti i suoi discendenti hanno un fattore
         * di bilanciamento compreso tra -1 e 1.
         * 
         * @return true se questo nodo e tutti i suoi discendenti sono
         *         bilanciati, false altrimenti.
         */
        public boolean isBalanced() {
    		int factor = this.getBalanceFactor();
    		if(factor >= -1 && factor <= 1) {
    			if(this.right != null && this.left != null) {
    				if(this.left.isBalanced() && this.right.isBalanced()) {
    					return true;
    				}
    			}
    			else if(this.left == null && this.right != null) {              
    				if(this.right.isBalanced()) {
    					return true;
    				}
    			}
    			else if(this.left != null && this.right == null) {          
    				if (this.left.isBalanced()) {
    					return true;
    				}
    			}
    			else if(this.isLeaf()){
    				return true;
    			}
    		}
        	else {
        		return false;
        	}
			return false;
        }

        /**
         * @return the el
         */
        public E getEl() {
            return el;
        }

        /**
         * @param el
         *               the el to set
         */
        public void setEl(E el) {
            this.el = el;
        }

        /**
         * @return the count
         */
        public int getCount() {
            return count;
        }

        /**
         * @param count
         *                  the count to set
         */
        public void setCount(int count) {
            this.count = count;
        }

        /**
         * @return the left
         */
        public AVLTreeNode getLeft() {
            return left;
        }

        /**
         * @param left
         *                 the left to set
         */
        public void setLeft(AVLTreeNode left) {
            this.left = left;
        }

        /**
         * @return the right
         */
        public AVLTreeNode getRight() {
            return right;
        }

        /**
         * @param right
         *                  the right to set
         */
        public void setRight(AVLTreeNode right) {
            this.right = right;
        }

        /**
         * @return the parent
         */
        public AVLTreeNode getParent() {
            return parent;
        }

        /**
         * @param parent
         *                   the parent to set
         */
        public void setParent(AVLTreeNode parent) {
            this.parent = parent;
        }

        /**
         * @param height
         *                   the height to set
         */
        public void setHeight(int height) {
            this.height = height;
        }

        /*
         * (non-Javadoc)
         * 
         * @see java.lang.Object#toString()
         */
        @Override
        public String toString() {
            StringBuffer s = new StringBuffer();
            s.append("(");
            s.append(this.el);
            s.append(", ");
            if (this.left == null)
                s.append("()");
            else
                s.append(this.left.toString());
            s.append(", ");
            if (this.right == null)
                s.append("()");
            else
                s.append(this.right.toString());
            s.append(")");
            return s.toString();
        }

        /**
         * Ricerca un elemento a partire da questo nodo.
         * 
         * @param el
         *               the element to search for
         * 
         * @return the node containing the element or null if the element is not
         *         found
         */
        public AVLTreeNode search(E el) {
            // TODO implementare
        	AVLTreeNode node = this;
            int x = this.el.compareTo(el);
            if (x < 0) {
                if (this.right != null)
                    return this.right.search(el);
                else
                    return null;
            } else if (x > 0) {
                   if (this.left != null)
                       return this.left.search(el);
                   else
                       return null;
               } else 
                   return this;
        }

        /**
         * Inserisce un elemento nell'albero AVL a partire da questo nodo. Se
         * l'elemento è già presente ne aumenta semplicemente la molteplicità di
         * uno. Se l'elemento non è presente aggiunge un nodo nella opportuna
         * posizione e poi procede al ribilanciamento dell'albero se
         * l'inserimento del nuovo nodo provoca uno sbilanciamento in almeno un
         * nodo.
         * 
         * @param el
         *               l'elemento da inserire
         * 
         * @return il numero di confronti tra elementi della classe {@code E}
         *         effettuati durante l'inserimento.
         */
        public int insert(E el) {
        	int compare = this.el.compareTo(el);
        	int counter = 0;
        	if (compare == 0) {
        		this.count++; 
        		counter++;
        		}
            else if(compare < 0) {
            	if (this.right == null) {            		
            		this.right = new AVLTreeNode(el, this); 
            		this.updateHeight();
            	} 
            	else {
            		this.right.insert(el); 
            		this.updateHeight();
            	}
            	counter++;
            }
            else if(compare > 0) {
            	if (this.left == null) {            		
            		this.left = new AVLTreeNode(el, this);
            		this.updateHeight();
            	} 
            	else {
            		this.left.insert(el); 
            		this.updateHeight();
            	} 
            	counter++;
            	}        	            
            
            	int balance = this.getBalanceFactor();

            		if (balance > 1) {
            			if(this.left.getBalanceFactor() > 0) {
            				rotazioneSS();
            			}
            			else if(this.left.getBalanceFactor() < 0) {
            					rotazioneSD();
            			}
            		}
            		else if (balance < -1) {
            			if(this.right.getBalanceFactor() > 0) {
            				rotazioneDS();
            			}
            			else if(this.right.getBalanceFactor() < 0) {
            					rotazioneDD();
            			}
            		}                               
			return counter;
        }
        
        
        public void inOrderVisit(List<E> l) {
            if(this.left != null) {
            	this.left.inOrderVisit(l);
            }

            for(int i = 0; i < this.count; i++) {
            	l.add(this.el);
            }

            if(this.right != null) {
            	this.right.inOrderVisit(l);
            }
        }
     
        
        /**
         * Rotazione che si esegue in seguito ad un inserimento a sinistra del sottoalbero 
         * sinistro che causa uno sbilanciamento. 
         * In particolare un nodo avrà un coefficiente di bilanciamento di +2 
         * e il suo figlio sinistro un coefficiente di bilanciamento di +1.
         * 
         * @param g 
         * 				radice attuale  
         * @param e
         * 				figlio sinistro di actualRoot che diventerà la nuova radice
         */
        private void rotazioneSS () {
        	AVLTreeNode node = this;
        	AVLTreeNode leftNode = this.left;
        	AVLTreeNode rightSon = leftNode.right;
        	if(node.getParent() != null) {
            	leftNode.parent = node.getParent();
        		int delta = node.getParent().el.compareTo(node.el);
        		if (delta < 0) {
        			node.getParent().right = leftNode;
        		}
        		else if (delta > 0) {
        			node.getParent().left = leftNode;
        		}
        	}
        	else {
        		root = leftNode;
        	}
        	node.left = rightSon;
        	if(rightSon != null) {
        		rightSon.parent = node;
        	}
        	node.parent = leftNode;
        	leftNode.right = node;
        	node.updateHeight();
        	leftNode.updateHeight();
        }
        
        /**
         * Rotazione che si esegue in seguito ad un inserimento a destra del sottoalbero 
         * sinistro che causa uno sbilanciamento. 
         * In particolare un nodo avrà un coefficente di bilanciamento di +2 
         * e il suo figlio sinistro un coefficente di bilanciamento di -1.
         * 
         * @param g
         * 				radice attuale
         * @param e
         * 				figlio sinistro di actualRoot
         */				
        private void rotazioneSD () {
        	AVLTreeNode node = this;
        	AVLTreeNode leftNode = this.left;
        	
        	leftNode.rotazioneDD();
        	node.rotazioneSS();

        	}
        
        /**
         * Rotazione che si esegue in seguito ad un inserimento a destra del sottoalbero 
         * destro che causa uno sbilanciamento. 
         * In particolare un nodo avrà un coefficente di bilanciamento di -2 
         * e il suo figlio destro un coefficente di bilanciamento di -1.
         * 
         * @param actualRoot 
         * 				radice attuale
         * @param nextRoot
         * 				figlio destro di actualRoot che diventerà la nuova radice 
         */
        private void rotazioneDD () {     
        	AVLTreeNode node = this;
        	AVLTreeNode rightNode = this.right;
        	AVLTreeNode leftSon = rightNode.left;
        	if(node.getParent() != null) {   
        		rightNode.parent = node.getParent(); 
        		int delta = node.getParent().getEl().compareTo(node.el);
        		if (delta < 0) {
        			node.getParent().right = rightNode;
        		}
        		else if (delta > 0) {
        			node.getParent().left = rightNode;
        		}
        	}
        	else {
        		root = rightNode;
        	}
    		node.right = leftSon;
        	if(leftSon != null) {
        		leftSon.parent = node;
        	}
        	node.parent = rightNode;
        	rightNode.left = node;
        	node.updateHeight();
        	rightNode.updateHeight();

        }
        
        /**
         * Rotazione che si esegue in seguito ad un inserimento a sinistra del sottoalbero 
         * destro che causa uno sbilanciamento. 
         * In particolare un nodo avrà un coefficente di bilanciamento di -2 
         * e il suo figlio destro un coefficente di bilanciamento di +1.
         * 
         * @param actualRoot
         * 				radice attuale
         * @param actualRootRightSon
         * 				figlio sinistro di actualRoot
         */	
        private void rotazioneDS () {
        	AVLTreeNode node = this;
        	AVLTreeNode rightNode = this.right;
        	
        	rightNode.rotazioneSS();
        	node.rotazioneDD(); 
        }
    }
}
